; Sample general configuration file for the production environment. Copy this into your
; application's conf/ directory. You may put whatever application-specific configuration
; you like here. Each setting can be fetched by calling Config::get('key'), where key is
; the setting you want to return, ie. 'mail'.

[app]
webRoot = 				; Must be absolute URI including scheme. No trailing slash!
staticRoot = "/static"	; URI of static resources (ie. another host: http://static.example.com)
locale = "en_US.utf8"

; Section defining where to log exceptions and errors to. Logging is automatically enabled
; in the production environment, and disabled in development and testing (where they are
; displayed instead).

[logging]
level = Off				; Currently only On or Off
file = 					; Absolute path, needs to be writable by Apache
email = 				; When defined, be sure to configure MailService below as well

; Database configuration. 'type' is mandatory, while implementations can define other settings.

[database]
type = "PostgreSql"		; Or 'Sqlite'
name = 					; Database name for PostgreSql, file for SQLite (writable by Apache)
host = "localhost"		; Not relevant for Sqlite
username = 				; --"--
password = 				; --"--

; Configure your e-mail details for the MailService library used to send e-mails.

[mail]
from.email = 
from.name = 
smtp.auth = Off
smtp.host = 
smtp.username = 
smtp.password = 

; Section defining which interceptors are to be invoked at a given URI. Wildcard mapping
; is supported. You specify interceptors by their name configured in interceptors.php, which
; can either refer to single interceptors or interceptor stacks. The interceptors must be
; wrapped in an array, and you may reference both single interceptors and interceptor stacks
; in the same mapping.
; 
; You can exclude certain interceptors from being invoked at specific URIs by prefixing the
; interceptor name with a ! (exclamation mark). For instance, you may have an authentication
; interceptor mapped to /admin/* (everything within /admin), but want to leave /admin/login open
; to the public (after all, users must be allowed to log in). This can be done by these mappings:
; 
;   /admin/*     = "auth"
;   /admin/login = "!auth"
; 
; Order is of significance when mapping interceptors, and should be from least to most specific
; URI. If you were to define the excluding mapping in this example before the regular inclusive
; mapping, it would not work as advertised above. The wild-card mapping within /admin
; would then override the specific /admin/login, and the exclude-mapping would not have any
; effect.

[interceptors]
* = "defaultStack"

; You may override any interceptor specific settings you like. The example below specifies
; the model class, session key and login URI for the authentication interceptor
; (see src/conf/interceptors.php in for more settings).

[interceptors.settings]
; auth.userModel = "AuthUser"
; auth.userKey = "user"
; auth.loginUri = "/login"

; You can define your own stacks of interceptors when you use a specific combination
; of interceptors often. The name of a stack is used in exactly the same way as
; the name of a single interceptor in the URI mapping above. There are two predefined
; stacks, shown below.

[interceptors.stacks]
; defaultStack = "session, message, error, transaction, model, validation"
; authStack = "session, message, error, transaction, auth, model, validation"

; Section defining which action mappers to use for the specified URIs. The first match is
; used - all definitions are not necessarily searched for the most specific match.

; [actionmappers]
; * = "DefaultActionMapper"
