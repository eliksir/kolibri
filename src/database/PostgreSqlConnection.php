<?php
/**
 * This class extends the DatabaseConnection class to support connections to a PostgreSQL database.
 * This class may also implement PostgreSQL-specific features.
 * 
 * @version 	$Id: PostgreSqlConnection.php 1547 2008-09-03 05:39:28Z anders $
 */
class PostgreSqlConnection extends DatabaseConnection {
	private $host;
	private $username;
	private $password;
	private $database;

	protected $query_func			= 'pg_query';
	protected $error_func			= 'pg_last_error';
	protected $fetch_all_func		= 'pg_fetch_all';
	protected $fetch_row_func		= 'pg_fetch_row';
	protected $affected_rows_func	= 'pg_affected_rows';

	/**
	 * Creates a new instance of this class.
	 * 
	 * If the optional <code>$lazy</code> parameter is set to <code>FALSE</code>, a connection to
	 * the database is established. The default is <code>TRUE</code>, in which case a connection
	 * will be established on the first call to <code>execute()</code> or <code>query()</code>.
	 *
	 * @param bool $lazy	<code>TRUE</code> to hold off establishing a connection to the database
	 * 						(default), <code>FALSE</code> to connect immediately.
	 * @return DatabaseConnection
	 */
	public function __construct ($conf) {
		$this->host     = $conf['host'];
		$this->username = $conf['username'];
		$this->password = $conf['password'];
		$this->database = $conf['database'];
	}

	/**
	 * Connects to the PostgreSQL database described in this object. If any error occurs, a user
	 * error is triggered.
	 * 
	 * @return bool	<code>TRUE</code> if a connection was successfully established,
	 * 				<code>FALSE</code> if not.
	 */
	public function connect () {
		$connectionString = "host={$this->host} dbname={$this->database} user={$this->username} password={$this->password}";
		$this->connection = pg_pconnect($connectionString);

		if (!$this->connection) {
			trigger_error("Could not connect to database!", E_USER_ERROR);
			return false;
		}
		return true;
	}

	/**
	 * Returns the value of the last sequence in the row created by the last INSERT.
	 *
	 * @return int	The value of the new ID generated by a sequence.
	 */
	public function lastInsertId () {
		return $this->getOne("SELECT LASTVAL()");
	}

	/**
	 * Escapes a value to make it safe for use in SQL queries.
	 * 
	 * Converts null to SQL NULL string, boolean values to accepted string representations, and
	 * escapes necessary characters in strings. Pure numeric values are simply returned as is.
	 *
	 * @param mixed $value	Data value to escape.
	 * @return string	A safe data value for use in SQL queries.
	 */
	public function escapeValue ($value) {
		if ($value === NULL) {
			return 'NULL';
		}
		if (is_bool($value)) {
			return ($value ? 'true' : 'false');
		}
		if ($this->isPureNumber($value)) {
			return $value;
		}

		if (get_magic_quotes_gpc()) {
			$value = stripslashes($value);
		}
		return "'" . pg_escape_string($value) . "'";
	}

	/**
	 * Stricter type check on numbers. Solves one specific problem where the string value contains
	 * prefixing zeroes, which most likely means it shouldn't be treated as a number but a string of
	 * digits. Ie. telephone numbers, hexadecimal strings, postal codes etc.
	 */
	private function isPureNumber ($value) {
		// Only values considered numeric by PHP are pure numbers
		if (!is_numeric($value)) {
			return false;
		}
		
		// If the value is an actual int or float type variable it's a pure number
		if (is_int($value) || is_float($value)) {
			return true;
		}
		
		// If it contains a decimal point, it's considered a pure number
		if (strpos($value, '.') !== false) {
			return true;
		}
		
		// If an integer cast does not change the number length, it's considered pure (ie. no leading zeroes)
		if (strlen((int) $value) == strlen($value)) {
			return true;
		}
		
		return false;
	}
}
?>
